# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Deployment

on:
  workflow_run:
    workflows: ["Unit & Integration Tests"]
    types:
      - completed
  push:
   branches:
      - master
      - 'release/*'

env:
    INVALID_EVENT_BRANCH_UNKNOWN: 1
    WEBAPPPATH: '${{ github.workspace }}/src/Template/Template.MvcWebApp'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18  # Especifica aquí la versión de Node.js que necesitas

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Install Node dependencies
        run: |
            cd ${{env.WEBAPPPATH}}
            npm install 

      - name: Run Gulp
        run: |
            cd ${{env.WEBAPPPATH}}
            npm run build

      - name: Install dependencies
        run: dotnet restore ${{env.WEBAPPPATH}}

      - name: Build and publish
        run: |
            dotnet build --configuration Release --no-restore ${{env.WEBAPPPATH}}
            dotnet publish -c Release --no-build -o ${{env.DOTNET_ROOT}}/publish ${{env.WEBAPPPATH}}

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: DemoWeb
          path: ${{env.DOTNET_ROOT}}/publish

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: DemoWeb

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'SurfAdminAgileCoding'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_BE7A9D8FA0DD4CBEB7143A56C57EAA92 }}
          package: .

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    #if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build App Docker image
        run: |
               docker build '${{ github.workspace }}/src/Template' --tag ghcr.io/3panas/template-webapp:latest
               docker push ghcr.io/3panas/template-webapp:latest



  #create-release:
  #  name: Create release
  #  runs-on: ubuntu-latest
  #  if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.head_branch == 'master' }} || github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master'
  #  needs: deploy

  #  steps:
  #    - name: Check for Existing Release
  #      id: check_release
  #      run: |
  #        release_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest)
  #        if [ "$(echo "$release_info" | jq -r .message)" = "Not Found" ]; then
  #          echo "{release_version}=1" >> GITHUB_OUTPUT
  #        else
  #          echo "La última release es:"
  #          echo "$release_info" | jq '.tag_name, .html_url'
  #        fi

  #    - name: Package Source Code
  #      run: |
  #        cd ${{ github.workspace }}
  #        zip -r SourceCode.zip . -x "*/node_modules/*" "*/bin/*" "*/obj/*"

  #    - name: Create DemoWeb folder
  #      run: mkdir DemoWeb

  #    - name: Download artifact from build job
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: DemoWeb

  #    - name: Package DemoWeb
  #      run: |
  #         cd ${{ github.workspace }}
  #         zip -r DemoWeb.zip DemoWeb 

  #    - name: Create Release
  #      id: create_release
  #      uses: softprops/action-gh-release@v1  # Utiliza la acción softprops/action-gh-release
  #      with:
  #        files: |
  #          ./DemoWeb.zip
  #          ./SourceCode.zip


#create-release:
#    name: Create release
#    runs-on: ubuntu-latest

#    steps:
#      - name: Determining branch name
#        id: extract_branch
#        run: |
#          if [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
#            branch=$(echo ${GITHUB_REF##*/})
#            echo "{branch_name}={$branch}" >> GITHUB_OUTPUT
#          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
#            branch = $(echo $GITHUB_BASE_REF)
#            echo "{branch_name}={$branch}" >> GITHUB_OUTPUT
#          else
#            exit ${{ env.INVALID_EVENT_BRANCH_UNKNOWN }}
#          fi
#          target=$(echo {$branch} | cut -d '/' -f1)
#          version=$(echo {$branch} | cut -d '/' -f2)
#          echo "{target}={$target}" >> GITHUB_OUTPUT
#          echo "{version}={$version}" >> GITHUB_OUTPUT


#      - name: Determining target and version
#        id: release_version
#        run: |
#            target=$(echo ${{ steps.extract_branch.outputs.branch_name }} | cut -d '/' -f1)
#            version=$(echo ${{ steps.extract_branch.outputs.branch_name }} | cut -d '/' -f2)
#            echo "{target}={$target}" >> GITHUB_OUTPUT
#            echo "{version}={$version}" >> GITHUB_OUTPUT
#            echo Version - $version
      
            
